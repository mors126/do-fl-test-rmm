apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-backend
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-backend
  template:
    metadata:
      labels:
        app: tactical-backend
    spec:
      initContainers:
        - name: tactical-init
          image: {{ .Values.image.backend }}:{{ .Values.image.tag | default .Values.image.tag }}
          command: ["/entrypoint.sh", "tactical-init"]
          volumeMounts:
            - name: tactical-volume
              mountPath: /opt/tactical
          envFrom:
            - configMapRef:
                name: tactical-backend-config
          env:
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: tactical-secrets
                  key: DJANGO_SECRET_KEY
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: tactical-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASS
              valueFrom:
                secretKeyRef:
                  name: tactical-secrets
                  key: POSTGRES_PASSWORD
            - name: REDIS_HOST
              value: redis
      containers:
        - name: backend
          image: {{ .Values.image.backend }}:{{ .Values.image.tag | default .Values.image.tag }}
          command: ["/entrypoint.sh"]
          args: ["tactical-backend"]
          ports:
            - containerPort: 8000
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 50Mi
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: 8080
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          #   timeoutSeconds: 2
          #   failureThreshold: 3
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: 8080
          #   initialDelaySeconds: 2
          #   periodSeconds: 5
          #   timeoutSeconds: 2
          #   failureThreshold: 3
          envFrom:
            - configMapRef:
                name: tactical-backend-config
          env:
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: tactical-secrets
                  key: DJANGO_SECRET_KEY
            - name: DATABASE_URL
              value: postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/tactical
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: tactical-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tactical-secrets
                  key: POSTGRES_PASSWORD
            - name: REDIS_HOST
              value: redis
      volumes:
        - name: tactical-volume
          emptyDir: {}